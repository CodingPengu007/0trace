#################################################################################
# LEGAL NOTICE AT THE BEGINNING
#################################################################################

# The graphical elements in this program were generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# BSD 3-Clause License
# Copyright (c) 2021, Parth Jadhav
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar


import os

current_dir = os.path.dirname(os.path.abspath(__file__))
assets_path = os.path.join(current_dir, "assets", "startup_warning_query")


def relative_to_assets(path: str) -> Path:
    return assets_path / Path(path)

def on_yes_button_click():
    return "yes"

def on_no_button_click():
    return "no"

def main():
    window = Tk()

    window.geometry("500x400")
    window.configure(bg = "#383838")

    icon = PhotoImage(file=os.path.join(current_dir, "assets", "startup_warning_query", "settings_icon.png"))
    window.iconphoto(False, icon)

    window.title("Settings")

    canvas = Canvas(
        window,
        bg = "#383838",
        height = 400,
        width = 500,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        498.0,
        -2.0,
        500.0,
        400.0,
        fill="#01D119",
        outline="")

    canvas.create_rectangle(
        0.0,
        -2.0,
        2.0,
        400.0,
        fill="#01D119",
        outline="")

    canvas.create_rectangle(
        -2.0,
        -0.76922607421875,
        500.0,
        1.23077392578125,
        fill="#01D119",
        outline="")

    canvas.create_rectangle(
        -2.0,
        30.0,
        500.0,
        32.0,
        fill="#01D119",
        outline="")

    canvas.create_rectangle(
        -2.0,
        398.0,
        500.0,
        400.0,
        fill="#01D119",
        outline="")

    image_settings_title = PhotoImage(
        file=relative_to_assets("settings_title.png"))
    settings_title = canvas.create_image(
        51.0,
        17.0,
        image=image_settings_title
    )

    image_settings_icon = PhotoImage(
        file=relative_to_assets("settings_icon.png"))
    settings_icon = canvas.create_image(
        116.0,
        14.84613037109375,
        image=image_settings_icon
    )

    image_close_icon = PhotoImage(
        file=relative_to_assets("close_icon.png"))
    close_icon = canvas.create_image(
        482.0,
        18.0,
        image=image_close_icon
    )

    image_welcome_title = PhotoImage(
        file=relative_to_assets("welcome_title.png"))
    welcome_title = canvas.create_image(
        254.0,
        55.0,
        image=image_welcome_title
    )

    image_info_text = PhotoImage(
        file=relative_to_assets("info_text.png"))
    info_text = canvas.create_image(
        256.0,
        194.0,
        image=image_info_text
    )

    yes_button_image = PhotoImage(
        file=relative_to_assets("yes_button.png"))

    yes_button = Button(
        image=yes_button_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [on_yes_button_click(), window.destroy()],
        relief="flat"
    )
    yes_button.place(
        x=36.0,
        y=323.0,
        width=200.0,
        height=53.0
    )

    no_button_image = PhotoImage(
        file=relative_to_assets("no_button.png"))
    no_button = Button(
        image=no_button_image,
        borderwidth=0,
        highlightthickness=0,
        command=lambda: [on_no_button_click(), window.destroy()],
        relief="flat"
    )
    no_button.place(
        x=263.0,
        y=323.0,
        width=200.0,
        height=53.0
    )
    window.resizable(False, False)
    window.mainloop()

if __name__ == "__main__":
    main()